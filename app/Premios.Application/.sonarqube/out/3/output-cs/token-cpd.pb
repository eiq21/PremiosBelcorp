ê
ÅC:\Miguel\GitHub\PremiosBelcorp\app\Premios.Application\Belcorp.Premios.Infrastructure.CrossCutting\AppSettingModel\LdapConfig.cs
	namespace 	
Belcorp
 
. 
Premios 
. 
Infrastructure (
.( )
CrossCutting) 5
.5 6
AppSettingModel6 E
{ 
public 

class 

LdapConfig 
{ 
public		 
string		 
Host		 
{		 
get		  
;		  !
set		" %
;		% &
}		' (
public

 
int

 
Port

 
{

 
get

 
;

 
set

 "
;

" #
}

$ %
public 
string 
Domain 
{ 
get "
;" #
set$ '
;' (
}) *
} 
} ˝
zC:\Miguel\GitHub\PremiosBelcorp\app\Premios.Application\Belcorp.Premios.Infrastructure.CrossCutting\Constants\Constants.cs
	namespace 	
Belcorp
 
. 
Premios 
. 
Infrastructure (
.( )
CrossCutting) 5
.5 6
	Constants6 ?
{ 
public 

static 
class 
	Constants !
{ 
public

 
static

 
class

 
IdentityServer

 *
{ 	
public 
const 
string !
API_RESOURCE_SECURITY  5
=6 7
$str8 E
;E F
public 
const 
string "
API_RESOURCE_PROTOCOLS  6
=7 8
$str9 G
;G H
public 
const 
string '
API_RESOURCE_SECURITY_SCOPE  ;
=< =
$str> Q
;Q R
public 
const 
string (
API_RESOURCE_PROTOCOLS_SCOPE  <
== >
$str? R
;R S
public 
const 
string 
	CLIENT_ID  )
=* +
$str, 4
;4 5
public 
const 
string 
CLIENT_TOKEN_ID  /
=0 1
$str2 G
;G H
} 	
public 
static 
class 
CodigoMensaje )
{ 	
public 
const 
string 
USUARIO_NO_EXISTE  1
=2 3
$str4 E
;E F
} 	
public 
static 
class 
	TipoError %
{ 	
public 
const 
string 
DOMINIO  '
=( )
$str* 2
;2 3
public   
const   
string   
APP    #
=  $ %
$str  & +
;  + ,
}!! 	
}"" 
}## Ê
zC:\Miguel\GitHub\PremiosBelcorp\app\Premios.Application\Belcorp.Premios.Infrastructure.CrossCutting\Constants\Functions.cs
	namespace 	
Belcorp
 
. 
Premios 
. 
Infrastructure (
.( )
CrossCutting) 5
.5 6
	Constants6 ?
{ 
public		 

static		 
class		 
	Functions		 !
{

 
public 
static 
string 

GetMessage '
(' (
string( .
codigo/ 5
)5 6
{ 	
return 
new 
ResourceManager &
(& '
$str' g
,g h
Assemblyi q
.q r!
GetExecutingAssembly	r Ü
(
Ü á
)
á à
)
à â
.
â ä
	GetString
ä ì
(
ì î
codigo
î ö
)
ö õ
;
õ ú
} 	
} 
} Úõ
|C:\Miguel\GitHub\PremiosBelcorp\app\Premios.Application\Belcorp.Premios.Infrastructure.CrossCutting\Encrypt\EncryptHelper.cs
	namespace 	
Belcorp
 
. 
Premios 
. 
Infrastructure (
.( )
CrossCutting) 5
.5 6
Encrypt6 =
{		 
public

 

static

 
class

 
EncryptHelper

 %
{ 
public 
static 
string 

GetMd5Hash '
(' (
string( .
key/ 2
)2 3
{ 	
MD5 
	md5Hasher 
= 
MD5 
.  
Create  &
(& '
)' (
;( )
Byte 
[ 
] 
data 
= 
	md5Hasher #
.# $
ComputeHash$ /
(/ 0
Encoding0 8
.8 9
Default9 @
.@ A
GetBytesA I
(I J
keyJ M
)M N
)N O
;O P
StringBuilder 
sBuilder "
=# $
new% (
StringBuilder) 6
(6 7
)7 8
;8 9
for 
( 
int 
i 
= 
$num 
; 
i 
< 
data  $
.$ %
Length% +
;+ ,
i- .
++. 0
)0 1
{ 
sBuilder 
. 
Append 
(  
data  $
[$ %
i% &
]& '
.' (
ToString( 0
(0 1
$str1 5
)5 6
)6 7
;7 8
} 
return 
sBuilder 
. 
ToString $
($ %
)% &
;& '
} 	
public 
static 
bool 
VerifyMd5Hash (
(( )
string) /
input0 5
,5 6
string7 =
hash> B
)B C
{ 	
String 
hashOfInput 
=  

GetMd5Hash! +
(+ ,
input, 1
)1 2
;2 3
StringComparer 
comparer #
=$ %
StringComparer& 4
.4 5
OrdinalIgnoreCase5 F
;F G
return 
( 
$num 
== 
comparer !
.! "
Compare" )
() *
hashOfInput* 5
,5 6
hash7 ;
); <
)< =
;= >
} 	
public 
static 
string 
GenerateClave *
(* +
int+ .
nroClave/ 7
)7 8
{   	
string!! 
_allowedChars!!  
=!!! "
$str!!# ]
;!!] ^
byte"" 
["" 
]"" 

randomByte"" 
="" 
new""  #
byte""$ (
[""( )
nroClave"") 1
]""1 2
;""2 3
char## 
[## 
]## 
chars## 
=## 
new## 
char## #
[### $
nroClave##$ ,
]##, -
;##- .
int$$ 
allowedCharCount$$  
=$$! "
_allowedChars$$# 0
.$$0 1
Length$$1 7
;$$7 8
Random%% 

_ramdomObj%% 
=%% 
new%%  #
Random%%$ *
(%%* +
)%%+ ,
;%%, -
for&& 
(&& 
int&& 
i&& 
=&& 
$num&& 
;&& 
i&& 
<&& 
nroClave&&  (
;&&( )
i&&* +
++&&+ -
)&&- .
{'' 

_ramdomObj(( 
.(( 
	NextBytes(( $
((($ %

randomByte((% /
)((/ 0
;((0 1
chars)) 
[)) 
i)) 
])) 
=)) 
_allowedChars)) (
[))( )

randomByte))) 3
[))3 4
i))4 5
]))5 6
%))7 8
allowedCharCount))9 I
]))I J
;))J K
}** 
return,, 
new,, 
string,, 
(,, 
chars,, #
),,# $
;,,$ %
}-- 	
public11 
static11 
byte11 
[11 
]11 
GetSHA1Hash11 (
(11( )
string11) /
key110 3
)113 4
{22 	
return33 
GetSHA1Hash33 
(33 
Encoding33 '
.33' (
Default33( /
.33/ 0
GetBytes330 8
(338 9
key339 <
)33< =
)33= >
;33> ?
}44 	
public66 
static66 
byte66 
[66 
]66 
GetSHA1Hash66 (
(66( )
byte66) -
[66- .
]66. /
key660 3
)663 4
{77 	
var88 

sha1Hasher88 
=88 
SHA188 !
.88! "
Create88" (
(88( )
)88) *
;88* +
return99 

sha1Hasher99 
.99 
ComputeHash99 )
(99) *
key99* -
)99- .
;99. /
}:: 	
publicBB 
staticBB 
boolBB 
VerifySHA1HashBB )
(BB) *
byteBB* .
[BB. /
]BB/ 0
	hashInputBB1 :
,BB: ;
byteBB< @
[BB@ A
]BBA B
hashBBC G
)BBG H
{CC 	
returnDD 
hashDD 
.DD 
SequenceEqualDD %
(DD% &
	hashInputDD& /
)DD/ 0
;DD0 1
}EE 	
publicMM 
staticMM 
boolMM 
VerifySHA1HashMM )
(MM) *
stringMM* 0
inputMM1 6
,MM6 7
byteMM8 <
[MM< =
]MM= >
hashMM? C
)MMC D
{NN 	
varOO 
	hashInputOO 
=OO 
GetSHA1HashOO '
(OO' (
inputOO( -
)OO- .
;OO. /
returnPP 
hashPP 
.PP 
SequenceEqualPP %
(PP% &
	hashInputPP& /
)PP/ 0
;PP0 1
}QQ 	
publicZZ 
staticZZ 
stringZZ 
EncryptZZ $
(ZZ$ %
stringZZ% +
rawTextZZ, 3
)ZZ3 4
{[[ 	
var\\ 
rijndaelCipher\\ 
=\\  
new\\! $
RijndaelManaged\\% 4
(\\4 5
)\\5 6
;\\6 7
byte]] 
[]] 
]]] 
rawTextData]] 
=]]  
Encoding]]! )
.]]) *
UTF8]]* .
.]]. /
GetBytes]]/ 7
(]]7 8
rawText]]8 ?
)]]? @
;]]@ A
Rfc2898DeriveBytes__ 
	secretKey__ (
=__) *
GetSecretKey__+ 7
(__7 8
)__8 9
;__9 :
usingbb 
(bb 
varbb 
	encryptorbb  
=bb! "
rijndaelCipherbb# 1
.bb1 2
CreateEncryptorbb2 A
(bbA B
	secretKeybbB K
.bbK L
GetBytesbbL T
(bbT U
$numbbU W
)bbW X
,bbX Y
	secretKeybbZ c
.bbc d
GetBytesbbd l
(bbl m
$numbbm o
)bbo p
)bbp q
)bbq r
{cc 
usingdd 
(dd 
vardd 
memoryStreamdd '
=dd( )
newdd* -
MemoryStreamdd. :
(dd: ;
)dd; <
)dd< =
{ee 
usingff 
(ff 
varff 
cryptoStreamff +
=ff, -
newff. 1
CryptoStreamff2 >
(ff> ?
memoryStreamff? K
,ffK L
	encryptorffM V
,ffV W
CryptoStreamModeffX h
.ffh i
Writeffi n
)ffn o
)ffo p
{gg 
cryptoStreamhh $
.hh$ %
Writehh% *
(hh* +
rawTextDatahh+ 6
,hh6 7
$numhh8 9
,hh9 :
rawTextDatahh; F
.hhF G
LengthhhG M
)hhM N
;hhN O
cryptoStreamii $
.ii$ %
FlushFinalBlockii% 4
(ii4 5
)ii5 6
;ii6 7
returnjj 
Convertjj &
.jj& '
ToBase64Stringjj' 5
(jj5 6
memoryStreamjj6 B
.jjB C
ToArrayjjC J
(jjJ K
)jjK L
)jjL M
;jjM N
}kk 
}ll 
}mm 
}nn 	
publicuu 
staticuu 
byteuu 
[uu 
]uu 
EncryptToByteuu *
(uu* +
stringuu+ 1
rawTextuu2 9
)uu9 :
{vv 	
varww 
rijndaelCipherww 
=ww  
newww! $
RijndaelManagedww% 4
(ww4 5
)ww5 6
;ww6 7
bytexx 
[xx 
]xx 
rawTextDataxx 
=xx  
Encodingxx! )
.xx) *
UTF8xx* .
.xx. /
GetBytesxx/ 7
(xx7 8
rawTextxx8 ?
)xx? @
;xx@ A
Rfc2898DeriveByteszz 
	secretKeyzz (
=zz) *
GetSecretKeyzz+ 7
(zz7 8
)zz8 9
;zz9 :
using}} 
(}} 
var}} 
	encryptor}}  
=}}! "
rijndaelCipher}}# 1
.}}1 2
CreateEncryptor}}2 A
(}}A B
	secretKey}}B K
.}}K L
GetBytes}}L T
(}}T U
$num}}U W
)}}W X
,}}X Y
	secretKey}}Z c
.}}c d
GetBytes}}d l
(}}l m
$num}}m o
)}}o p
)}}p q
)}}q r
{~~ 
using 
( 
var 
memoryStream '
=( )
new* -
MemoryStream. :
(: ;
); <
)< =
{
ÄÄ 
using
ÅÅ 
(
ÅÅ 
var
ÅÅ 
cryptoStream
ÅÅ +
=
ÅÅ, -
new
ÅÅ. 1
CryptoStream
ÅÅ2 >
(
ÅÅ> ?
memoryStream
ÅÅ? K
,
ÅÅK L
	encryptor
ÅÅM V
,
ÅÅV W
CryptoStreamMode
ÅÅX h
.
ÅÅh i
Write
ÅÅi n
)
ÅÅn o
)
ÅÅo p
{
ÇÇ 
cryptoStream
ÉÉ $
.
ÉÉ$ %
Write
ÉÉ% *
(
ÉÉ* +
rawTextData
ÉÉ+ 6
,
ÉÉ6 7
$num
ÉÉ8 9
,
ÉÉ9 :
rawTextData
ÉÉ; F
.
ÉÉF G
Length
ÉÉG M
)
ÉÉM N
;
ÉÉN O
cryptoStream
ÑÑ $
.
ÑÑ$ %
FlushFinalBlock
ÑÑ% 4
(
ÑÑ4 5
)
ÑÑ5 6
;
ÑÑ6 7
return
ÖÖ 
memoryStream
ÖÖ +
.
ÖÖ+ ,
ToArray
ÖÖ, 3
(
ÖÖ3 4
)
ÖÖ4 5
;
ÖÖ5 6
}
ÜÜ 
}
áá 
}
àà 
}
ââ 	
public
êê 
static
êê 
byte
êê 
[
êê 
]
êê 
EncryptToByte
êê *
(
êê* +
byte
êê+ /
[
êê/ 0
]
êê0 1
rawByte
êê2 9
)
êê9 :
{
ëë 	
var
íí 
rijndaelCipher
íí 
=
íí  
new
íí! $
RijndaelManaged
íí% 4
(
íí4 5
)
íí5 6
;
íí6 7 
Rfc2898DeriveBytes
îî 
	secretKey
îî (
=
îî) *
GetSecretKey
îî+ 7
(
îî7 8
)
îî8 9
;
îî9 :
using
óó 
(
óó 
var
óó 
	encryptor
óó  
=
óó! "
rijndaelCipher
óó# 1
.
óó1 2
CreateEncryptor
óó2 A
(
óóA B
	secretKey
óóB K
.
óóK L
GetBytes
óóL T
(
óóT U
$num
óóU W
)
óóW X
,
óóX Y
	secretKey
óóZ c
.
óóc d
GetBytes
óód l
(
óól m
$num
óóm o
)
óóo p
)
óóp q
)
óóq r
{
òò 
using
ôô 
(
ôô 
var
ôô 
memoryStream
ôô '
=
ôô( )
new
ôô* -
MemoryStream
ôô. :
(
ôô: ;
)
ôô; <
)
ôô< =
{
öö 
using
õõ 
(
õõ 
var
õõ 
cryptoStream
õõ +
=
õõ, -
new
õõ. 1
CryptoStream
õõ2 >
(
õõ> ?
memoryStream
õõ? K
,
õõK L
	encryptor
õõM V
,
õõV W
CryptoStreamMode
õõX h
.
õõh i
Write
õõi n
)
õõn o
)
õõo p
{
úú 
cryptoStream
ùù $
.
ùù$ %
Write
ùù% *
(
ùù* +
rawByte
ùù+ 2
,
ùù2 3
$num
ùù4 5
,
ùù5 6
rawByte
ùù7 >
.
ùù> ?
Length
ùù? E
)
ùùE F
;
ùùF G
cryptoStream
ûû $
.
ûû$ %
FlushFinalBlock
ûû% 4
(
ûû4 5
)
ûû5 6
;
ûû6 7
return
üü 
memoryStream
üü +
.
üü+ ,
ToArray
üü, 3
(
üü3 4
)
üü4 5
;
üü5 6
}
†† 
}
°° 
}
¢¢ 
}
££ 	
public
™™ 
static
™™ 
string
™™ 
Decrypt
™™ $
(
™™$ %
string
™™% +
encryptText
™™, 7
)
™™7 8
{
´´ 	
try
¨¨ 
{
≠≠ 
var
ÆÆ 
rijndaelCipher
ÆÆ "
=
ÆÆ# $
new
ÆÆ% (
RijndaelManaged
ÆÆ) 8
(
ÆÆ8 9
)
ÆÆ9 :
;
ÆÆ: ;
byte
ØØ 
[
ØØ 
]
ØØ 
encryptTextData
ØØ &
=
ØØ' (
Convert
ØØ) 0
.
ØØ0 1
FromBase64String
ØØ1 A
(
ØØA B
encryptText
ØØB M
)
ØØM N
;
ØØN O 
Rfc2898DeriveBytes
±± "
	secretKey
±±# ,
=
±±- .
GetSecretKey
±±/ ;
(
±±; <
)
±±< =
;
±±= >
using
≥≥ 
(
≥≥ 
ICryptoTransform
≥≥ '
	decryptor
≥≥( 1
=
≥≥2 3
rijndaelCipher
≥≥4 B
.
≥≥B C
CreateDecryptor
≥≥C R
(
≥≥R S
	secretKey
≥≥S \
.
≥≥\ ]
GetBytes
≥≥] e
(
≥≥e f
$num
≥≥f h
)
≥≥h i
,
≥≥i j
	secretKey
≥≥k t
.
≥≥t u
GetBytes
≥≥u }
(
≥≥} ~
$num≥≥~ Ä
)≥≥Ä Å
)≥≥Å Ç
)≥≥Ç É
{
¥¥ 
using
µµ 
(
µµ 
var
µµ 
memoryStream
µµ +
=
µµ, -
new
µµ. 1
MemoryStream
µµ2 >
(
µµ> ?
encryptTextData
µµ? N
)
µµN O
)
µµO P
{
∂∂ 
using
∑∑ 
(
∑∑ 
var
∑∑ "
cryptoStream
∑∑# /
=
∑∑0 1
new
∑∑2 5
CryptoStream
∑∑6 B
(
∑∑B C
memoryStream
∑∑C O
,
∑∑O P
	decryptor
∑∑Q Z
,
∑∑Z [
CryptoStreamMode
∑∑\ l
.
∑∑l m
Read
∑∑m q
)
∑∑q r
)
∑∑r s
{
∏∏ 
var
ππ 
	plainText
ππ  )
=
ππ* +
new
ππ, /
byte
ππ0 4
[
ππ4 5
encryptTextData
ππ5 D
.
ππD E
Length
ππE K
]
ππK L
;
ππL M
int
∫∫ 
decryptedCount
∫∫  .
=
∫∫/ 0
cryptoStream
∫∫1 =
.
∫∫= >
Read
∫∫> B
(
∫∫B C
	plainText
∫∫C L
,
∫∫L M
$num
∫∫N O
,
∫∫O P
	plainText
∫∫Q Z
.
∫∫Z [
Length
∫∫[ a
)
∫∫a b
;
∫∫b c
return
ªª "
Encoding
ªª# +
.
ªª+ ,
UTF8
ªª, 0
.
ªª0 1
	GetString
ªª1 :
(
ªª: ;
	plainText
ªª; D
,
ªªD E
$num
ªªF G
,
ªªG H
decryptedCount
ªªI W
)
ªªW X
;
ªªX Y
}
ºº 
}
ΩΩ 
}
ææ 
}
øø 
catch
¿¿ 
{
¡¡ 
return
¬¬ 
null
¬¬ 
;
¬¬ 
}
√√ 
}
ƒƒ 	
public
ÀÀ 
static
ÀÀ 
string
ÀÀ 
Decrypt
ÀÀ $
(
ÀÀ$ %
byte
ÀÀ% )
[
ÀÀ) *
]
ÀÀ* +
encryptByte
ÀÀ, 7
)
ÀÀ7 8
{
ÃÃ 	
try
ÕÕ 
{
ŒŒ 
var
œœ 
rijndaelCipher
œœ "
=
œœ# $
new
œœ% (
RijndaelManaged
œœ) 8
(
œœ8 9
)
œœ9 :
;
œœ: ; 
Rfc2898DeriveBytes
—— "
	secretKey
——# ,
=
——- .
GetSecretKey
——/ ;
(
——; <
)
——< =
;
——= >
using
”” 
(
”” 
ICryptoTransform
”” '
	decryptor
””( 1
=
””2 3
rijndaelCipher
””4 B
.
””B C
CreateDecryptor
””C R
(
””R S
	secretKey
””S \
.
””\ ]
GetBytes
””] e
(
””e f
$num
””f h
)
””h i
,
””i j
	secretKey
””k t
.
””t u
GetBytes
””u }
(
””} ~
$num””~ Ä
)””Ä Å
)””Å Ç
)””Ç É
{
‘‘ 
using
’’ 
(
’’ 
var
’’ 
memoryStream
’’ +
=
’’, -
new
’’. 1
MemoryStream
’’2 >
(
’’> ?
encryptByte
’’? J
)
’’J K
)
’’K L
{
÷÷ 
using
◊◊ 
(
◊◊ 
var
◊◊ "
cryptoStream
◊◊# /
=
◊◊0 1
new
◊◊2 5
CryptoStream
◊◊6 B
(
◊◊B C
memoryStream
◊◊C O
,
◊◊O P
	decryptor
◊◊Q Z
,
◊◊Z [
CryptoStreamMode
◊◊\ l
.
◊◊l m
Read
◊◊m q
)
◊◊q r
)
◊◊r s
{
ÿÿ 
var
ŸŸ 
	plainText
ŸŸ  )
=
ŸŸ* +
new
ŸŸ, /
byte
ŸŸ0 4
[
ŸŸ4 5
encryptByte
ŸŸ5 @
.
ŸŸ@ A
Length
ŸŸA G
]
ŸŸG H
;
ŸŸH I
int
⁄⁄ 
decryptedCount
⁄⁄  .
=
⁄⁄/ 0
cryptoStream
⁄⁄1 =
.
⁄⁄= >
Read
⁄⁄> B
(
⁄⁄B C
	plainText
⁄⁄C L
,
⁄⁄L M
$num
⁄⁄N O
,
⁄⁄O P
	plainText
⁄⁄Q Z
.
⁄⁄Z [
Length
⁄⁄[ a
)
⁄⁄a b
;
⁄⁄b c
return
€€ "
Encoding
€€# +
.
€€+ ,
UTF8
€€, 0
.
€€0 1
	GetString
€€1 :
(
€€: ;
	plainText
€€; D
,
€€D E
$num
€€F G
,
€€G H
decryptedCount
€€I W
)
€€W X
;
€€X Y
}
‹‹ 
}
›› 
}
ﬁﬁ 
}
ﬂﬂ 
catch
‡‡ 
{
·· 
return
‚‚ 
null
‚‚ 
;
‚‚ 
}
„„ 
}
‰‰ 	
private
ÁÁ 
static
ÁÁ  
Rfc2898DeriveBytes
ÁÁ )
GetSecretKey
ÁÁ* 6
(
ÁÁ6 7
)
ÁÁ7 8
{
ËË 	
const
ÈÈ 
string
ÈÈ 
encryptionKey
ÈÈ &
=
ÈÈ' (
$str
ÈÈ) ?
;
ÈÈ? @
byte
ÍÍ 
[
ÍÍ 
]
ÍÍ 
salt
ÍÍ 
=
ÍÍ 
Encoding
ÍÍ "
.
ÍÍ" #
UTF8
ÍÍ# '
.
ÍÍ' (
GetBytes
ÍÍ( 0
(
ÍÍ0 1
encryptionKey
ÍÍ1 >
)
ÍÍ> ?
;
ÍÍ? @
var
ÏÏ 
	secretKey
ÏÏ 
=
ÏÏ 
new
ÏÏ  
Rfc2898DeriveBytes
ÏÏ  2
(
ÏÏ2 3
encryptionKey
ÏÏ3 @
,
ÏÏ@ A
salt
ÏÏB F
)
ÏÏF G
;
ÏÏG H
return
ÌÌ 
	secretKey
ÌÌ 
;
ÌÌ 
}
ÓÓ 	
}
ÔÔ 
} ‚
rC:\Miguel\GitHub\PremiosBelcorp\app\Premios.Application\Belcorp.Premios.Infrastructure.CrossCutting\Enums\Enums.cs
	namespace 	
Belcorp
 
. 
Premios 
. 
Infrastructure (
.( )
CrossCutting) 5
.5 6
Enums6 ;
{ 
public 

class 
Enums 
{ 
public		 
enum		 
TiposUrl		 
{

 	
BannerInicio 
= 
$num 
, $
BannerInformacionPremios $
=% &
$num' (
,( )%
BannerGanadoresAnteriores %
=& '
$num( )
,) *
BannerMovil 
= 
$num 
, 
VideoBaldosa 
= 
$num 
, 
FotoBaldosa 
= 
$num 
, 
VideoHistoria 
= 
$num 
, 
FotoRecomendacion 
= 
$num  !
} 	
} 
} ≠
âC:\Miguel\GitHub\PremiosBelcorp\app\Premios.Application\Belcorp.Premios.Infrastructure.CrossCutting\Exceptions\Domain\DominioException.cs
	namespace 	
Belcorp
 
. 
Premios 
. 
Infrastructure (
.( )
CrossCutting) 5
.5 6

Exceptions6 @
.@ A
DomainA G
{ 
[ 
Serializable 
] 
public 

class 
DominioException !
:" #
	Exception$ -
{		 
public

 
DominioException

 
(

  
)

  !
{

" #
}

$ %
public 
DominioException 
(  
string  &
message' .
). /
:0 1
base2 6
(6 7
message7 >
)> ?
{@ A
}B C
public 
DominioException 
(  
string  &
message' .
,. /
	Exception0 9
inner: ?
)? @
:A B
baseC G
(G H
messageH O
,O P
innerQ V
)V W
{X Y
}Z [
	protected 
DominioException "
(" #
System
 
. 
Runtime 
. 
Serialization &
.& '
SerializationInfo' 8
info9 =
,= >
System
 
. 
Runtime 
. 
Serialization &
.& '
StreamingContext' 7
context8 ?
)? @
: 
base 
( 
info 
, 
context  
)  !
{" #
}$ %
} 
} î
ÇC:\Miguel\GitHub\PremiosBelcorp\app\Premios.Application\Belcorp.Premios.Infrastructure.CrossCutting\Extensions\CustomExtensions.cs
	namespace 	
Belcorp
 
. 
Premios 
. 
Infrastructure (
.( )
CrossCutting) 5
.5 6

Extensions6 @
{ 
public		 

static		 
class		 
CustomExtensions		 (
{

 
public 
static 
	DataTable 
ToTable  '
<' (
T( )
>) *
(* +
this+ /
List0 4
<4 5
T5 6
>6 7
list8 <
)< =
{ 	
var 

properties 
= 
TypeDescriptor +
.+ ,
GetProperties, 9
(9 :
typeof: @
(@ A
TA B
)B C
)C D
;D E
var 
table 
= 
new 
	DataTable %
(% &
)& '
;' (
foreach 
( 
PropertyDescriptor '
prop( ,
in- /

properties0 :
): ;
{ 
table 
. 
Columns 
. 
Add !
(! "
prop" &
.& '
Name' +
,+ ,
Nullable- 5
.5 6
GetUnderlyingType6 G
(G H
propH L
.L M
PropertyTypeM Y
)Y Z
??[ ]
prop^ b
.b c
PropertyTypec o
)o p
;p q
} 
foreach 
( 
T 
item 
in 
list #
)# $
{ 
var 
row 
= 
table 
.  
NewRow  &
(& '
)' (
;( )
foreach 
( 
PropertyDescriptor +
prop, 0
in1 3

properties4 >
)> ?
{ 
row 
[ 
prop 
. 
Name !
]! "
=# $
prop% )
.) *
GetValue* 2
(2 3
item3 7
)7 8
??9 ;
DBNull< B
.B C
ValueC H
;H I
} 
table 
. 
Rows 
. 
Add 
( 
row "
)" #
;# $
} 
return 
table 
; 
} 	
} 
}   